{"variants":[{"paths":["\/tutorials\/tutorial\/practice8"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"課題8: いいねボタンを実装してみよう","chapter":"課題8: いいねボタンを実装してみよう","estimatedTimeInMinutes":60,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"おすすめのイラストのCellにいいねボタンを表示してみましょう。また、いいねしたことをAPIを叩いて記録しましょう。いいねを取り消す処理は実装しなくても大丈夫です"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"完成イメージを示したデザインファイルは "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=8%3A131&t=LvrX1uvlmhmv5YFJ-0"},{"type":"text","text":" です"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"以下は解答になります。この教材では、まず解答を見ずにインターネット等を見て自分で書いてみることをおすすめしています。15分以上詰まったら見るという使い方をしても大丈夫です"}]}]},{"kind":"tasks","tasks":[{"anchor":"解答-いいねボタンを実装する","title":"解答: いいねボタンを実装する","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"今までやったことの総集編のような課題になっています。ちょっと難しいかもしれませんががんばりましょう"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"Practice8_Section1_IllustCell_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustCellにいいねボタンを追加していきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustCell.xibにUIButtonを配置します。AutoLayoutでSuperviewとtrailingとbottomのマージンを0に設定します。また、widthとheightにも32を設定します。OutletをIllustCellのheartButtonと紐付けます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"Practice8_IllustCell_1.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIButtonのimageにheartを設定しておきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"Practice8_IllustCell_2.png"},{"code":"Practice8_Section1_IllustSection_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustCellのいいねボタンを押したときに呼ばれるhandlerをIllustSectionにも追加します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice8_Section1_MainViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustSectionに必要になったhandlerをMainViewControllerにも追加します。handlerが呼ばれたらViewModelにいいねの処理をして欲しいことを伝えます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice8_Section1_IllustViewModel_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustViewModelにいいねの処理を書いていきます。APIのpostIsFavoritedを呼び出します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice8_Section1_IllustViewModel_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"いいねがされたら表示を更新します。recommendedIllustsをすべて見て、IDが同じもののisFavoritedをtrueにします"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ただ、これでアプリを触ってみると、APIの通信が遅いため表示の反映までに時間が掛かってしまい、押されたかどうか不安になってしまいます。どうしたら良いでしょうか"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"Practice8_Section1_IllustViewModel_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"APIのリクエストを送る前に表示を更新するようにしてみましょう。これでUIのレスポンスが良くなったように見えます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice8_Section1_IllustViewModel_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"APIとの通信でエラーが起きた時は表示を戻すことによって、状態と表示の不整合を防ぐことができます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]}],"identifier":{"url":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"課題8: いいねボタンを実装してみよう","categoryPathComponent":"TableOfContents","role":"project","category":"お絵かきSNSを作ってみよう"},"hierarchy":{"modules":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--1:------2----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--2:-----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--3:-------------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--4:-------------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--5:-ViewModel-------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--6:----(----)----------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--7:----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--8:---------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B"}]}]}],"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","paths":[["doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/$volume","doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--8:---------------"]]},"references":{"Practice8_Section1_IllustViewModel_2.swift":{"syntax":"swift","content":["import Combine","import IllustAPIMock","","@MainActor","final class IllustViewModel {","    @Published var rankingIllusts: [Illust] = []","    @Published var recommendedIllusts: [Illust] = []","    @Published var offset: Int = 0","    @Published var hasNext: Bool = false","    @Published var isRequesting: Bool = false","","    private let api: IllustAPIMock","","    init(api: IllustAPIMock) {","        self.api = api","    }","","    func fetchIllusts() async {","        isRequesting = true","        do {","            rankingIllusts = try await api.getRanking()","            recommendedIllusts = try await api.getRecommended()","            offset = recommendedIllusts.count","            hasNext = !recommendedIllusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func fetchNextIllusts() async {","        guard !isRequesting else {","            return","        }","        guard hasNext else {","            return","        }","        isRequesting = true","        do {","            let illusts = try await api.getRecommended(offset: offset)","            self.recommendedIllusts += illusts","            self.offset = recommendedIllusts.count","            self.hasNext = !illusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func favorite(illust: Illust) async {","        do {","            _ = try await api.postIsFavorited(illustID: illust.id, isFavorited: true)","            recommendedIllusts = recommendedIllusts.map {","                if $0.id == illust.id {","                    var newIllust = illust","                    newIllust.isFavorited = true","                    return newIllust","                }","                return $0","            }","        } catch {","            print(error)","        }","    }","}"],"fileName":"IllustViewModel.swift","identifier":"Practice8_Section1_IllustViewModel_2.swift","type":"file","fileType":"swift","highlights":[{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: いいねボタンを実装する","abstract":[{"type":"text","text":"おすすめのイラストのCellにいいねボタンを表示してみましょう。また、いいねしたことをAPIを叩いて記録しましょう。いいねを取り消す処理は実装しなくても大丈夫です"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice8#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AD%25E3%2583%259C%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ヘッダーを作る","abstract":[{"type":"text","text":"2列表示のセクションの上にヘッダーを作って、何のコンテンツの領域かわかるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice2#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%2598%25E3%2583%2583%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents":{"role":"overview","title":"はじめに","abstract":[{"type":"text","text":"お絵かきSNSの開発を通して、実例に近いiOSアプリ開発を学んでいきましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","kind":"overview","type":"topic","url":"\/tutorials\/tableofcontents"},"Practice8_Section1_IllustViewModel_1.swift":{"syntax":"swift","content":["import Combine","import IllustAPIMock","","@MainActor","final class IllustViewModel {","    @Published var rankingIllusts: [Illust] = []","    @Published var recommendedIllusts: [Illust] = []","    @Published var offset: Int = 0","    @Published var hasNext: Bool = false","    @Published var isRequesting: Bool = false","","    private let api: IllustAPIMock","","    init(api: IllustAPIMock) {","        self.api = api","    }","","    func fetchIllusts() async {","        isRequesting = true","        do {","            rankingIllusts = try await api.getRanking()","            recommendedIllusts = try await api.getRecommended()","            offset = recommendedIllusts.count","            hasNext = !recommendedIllusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func fetchNextIllusts() async {","        guard !isRequesting else {","            return","        }","        guard hasNext else {","            return","        }","        isRequesting = true","        do {","            let illusts = try await api.getRecommended(offset: offset)","            self.recommendedIllusts += illusts","            self.offset = recommendedIllusts.count","            self.hasNext = !illusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func favorite(illust: Illust) async {","        do {","            _ = try await api.postIsFavorited(illustID: illust.id, isFavorited: true)","        } catch {","            print(error)","        }","    }","}"],"fileName":"IllustViewModel.swift","identifier":"Practice8_Section1_IllustViewModel_1.swift","type":"file","fileType":"swift","highlights":[{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56}]},"Practice8_Section1_MainViewController_1.swift":{"syntax":"swift","content":["import Combine","import IllustAPIMock","import UIKit","","class MainViewController: UIViewController {","    @IBOutlet private weak var collectionView: UICollectionView! {","        didSet {","            collectionView.delegate = self","            collectionView.dataSource = self","            registerCells()","        }","    }","    @IBOutlet private weak var loadingView: UIActivityIndicatorView!","","    private var sections: [Section] = [] {","        didSet {","            Task { @MainActor in","                self.collectionView.collectionViewLayout = {","                    let layout = UICollectionViewCompositionalLayout { (sectionIndex, environment) -> NSCollectionLayoutSection? in","                        return self.sections[sectionIndex].layoutSection()","                    }","                    return layout","                }()","                self.collectionView.reloadData()","            }","        }","    }","","    private let viewModel = IllustViewModel(api: IllustAPIMock())","    private var cancellables = Set<AnyCancellable>()","","    override func viewDidLoad() {","        super.viewDidLoad()","","        viewModel.$rankingIllusts","            .combineLatest(viewModel.$recommendedIllusts)","            .receive(on: DispatchQueue.main)","            .sink { [weak self] rankingIllusts, recommendedIllusts in","                guard let self = self else {","                    return","                }","                self.sections = [","                    RankingIllustSection(illusts: rankingIllusts),","                    IllustSection(illusts: recommendedIllusts, parentWidth: self.view.bounds.width, heartTapped: { illust in","                        Task {","                            await self.viewModel.favorite(illust: illust)","                        }","                    })","                ]","            }","            .store(in: &cancellables)","","        viewModel.$isRequesting","            .receive(on: DispatchQueue.main)","            .sink { [weak self] isRequesting in","                self?.loadingView.isHidden = !isRequesting","            }","            .store(in: &cancellables)","","        Task {","            await viewModel.fetchIllusts()","        }","    }","}","","extension MainViewController: UIScrollViewDelegate {","    func scrollViewDidScroll(_ scrollView: UIScrollView) {","        guard scrollView.contentOffset.y >= scrollView.contentSize.height - scrollView.frame.size.height else {","            return","        }","        Task {","            await viewModel.fetchNextIllusts()","        }","    }","}","","extension MainViewController {","    private func registerCells() {","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RecommendedHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RankingHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"IllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"IllustCell\")","        collectionView.register(UINib(nibName: \"RankingIllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"RankingIllustCell\")","    }","}","","extension MainViewController: UICollectionViewDelegate {","}","","extension MainViewController: UICollectionViewDataSource {","    func numberOfSections(in collectionView: UICollectionView) -> Int {","        return sections.count","    }","","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return sections[section].numberOfItems","    }","","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        return sections[indexPath.section].configureCell(collectionView: collectionView, indexPath: indexPath)","    }","","    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {","        guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"HeaderCell\", for: indexPath) as? HeaderCell else {","            fatalError()","        }","        switch kind {","        case \"RecommendedHeader\":","            header.bind(\"Recommended\")","            return header","        case \"RankingHeader\":","            header.bind(\"Ranking\")","            return header","        default:","            fatalError()","         }","    }","}"],"fileName":"MainViewController.swift","identifier":"Practice8_Section1_MainViewController_1.swift","type":"file","fileType":"swift","highlights":[{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"Practice8_IllustCell_2.png":{"alt":null,"type":"image","identifier":"Practice8_IllustCell_2.png","variants":[{"url":"\/images\/Practice8_IllustCell_2.png","traits":["1x","light"]}]},"Practice8_Section1_IllustCell_1.swift":{"syntax":"swift","content":["import IllustAPIMock","import Nuke","import UIKit","","class IllustCell: UICollectionViewCell {","    @IBOutlet private weak var heartButton: UIButton!","    @IBOutlet private weak var imageView: UIImageView! {","        didSet {","            imageView.contentMode = .scaleAspectFill","        }","    }","","    private var illust: Illust?","    private var heartTapped: ((Illust) -> Void)?","","    func bind(_ illust: Illust, heartTapped: @escaping (Illust) -> Void) {","        Nuke.loadImage(with: illust.imageURL, into: imageView)","        heartButton.configuration?.image = UIImage(systemName: illust.isFavorited ? \"heart.fill\" : \"heart\")","        self.illust = illust","        self.heartTapped = heartTapped","    }","","    @IBAction private func handleHeartButtonTapped(_ sender: UIButton) {","        guard let illust = illust else {","            return","        }","        heartTapped?(illust)","    }","}"],"fileName":"IllustCell.swift","identifier":"Practice8_Section1_IllustCell_1.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":13},{"line":14},{"line":15},{"line":16},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B":{"role":"pseudoSymbol","title":"解答: イラストの情報を取ってくる","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice4#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice2":{"role":"project","title":"課題2: おすすめのヘッダーを作ってみよう","estimatedTime":"40min","abstract":[{"type":"text","text":"2列表示のセクションの上にヘッダーを作って、何のコンテンツの領域かわかるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice2"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ランキングのセクションを作成する","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25BB%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4":{"role":"project","title":"課題4: イラストの情報を取ってきて表示しよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice4"},"Practice8_Section1_IllustViewModel_3.swift":{"syntax":"swift","content":["import Combine","import IllustAPIMock","","@MainActor","final class IllustViewModel {","    @Published var rankingIllusts: [Illust] = []","    @Published var recommendedIllusts: [Illust] = []","    @Published var offset: Int = 0","    @Published var hasNext: Bool = false","    @Published var isRequesting: Bool = false","","    private let api: IllustAPIMock","","    init(api: IllustAPIMock) {","        self.api = api","    }","","    func fetchIllusts() async {","        isRequesting = true","        do {","            rankingIllusts = try await api.getRanking()","            recommendedIllusts = try await api.getRecommended()","            offset = recommendedIllusts.count","            hasNext = !recommendedIllusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func fetchNextIllusts() async {","        guard !isRequesting else {","            return","        }","        guard hasNext else {","            return","        }","        isRequesting = true","        do {","            let illusts = try await api.getRecommended(offset: offset)","            self.recommendedIllusts += illusts","            self.offset = recommendedIllusts.count","            self.hasNext = !illusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func favorite(illust: Illust) async {","        recommendedIllusts = recommendedIllusts.map {","            if $0.id == illust.id {","                var newIllust = illust","                newIllust.isFavorited = true","                return newIllust","            }","            return $0","        }","","        do {","            _ = try await api.postIsFavorited(illustID: illust.id, isFavorited: true)","        } catch {","            print(error)","        }","    }","}"],"fileName":"IllustViewModel.swift","identifier":"Practice8_Section1_IllustViewModel_3.swift","type":"file","fileType":"swift","highlights":[{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59}]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--8:---------------":{"role":"article","title":"課題8: いいねボタンを実装してみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--8:---------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--8:---------------"},"https://www.figma.com/file/EkZe8zNKd8uTr1vehAzC74/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=8%3A131&t=LvrX1uvlmhmv5YFJ-0":{"title":"こちら","titleInlineContent":[{"type":"text","text":"こちら"}],"type":"link","identifier":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=8%3A131&t=LvrX1uvlmhmv5YFJ-0","url":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=8%3A131&t=LvrX1uvlmhmv5YFJ-0"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--2:-----------------":{"role":"article","title":"課題2: おすすめのヘッダーを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--2:-----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--2:-----------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: 2列表示の仕組みを作る","abstract":[{"type":"text","text":"イラストを2列で表示する仕組みを作っていきましょう。実際に画像を表示するのはこの先のSectionで扱うので、一旦2列表示の仕組みが作れればOKです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice1#%25E8%25A7%25A3%25E7%25AD%2594-2%25E5%2588%2597%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice7":{"role":"project","title":"課題7: 無限スクロールを実装してみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"おすすめのイラストは、スクロールで下まで読み込んだら次のイラストを表示するようにしたいです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice7"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: 無限スクロールを実装する","abstract":[{"type":"text","text":"おすすめのイラストは、スクロールで下まで読み込んだら次のイラストを表示するようにしたいです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice7#%25E8%25A7%25A3%25E7%25AD%2594-%25E7%2584%25A1%25E9%2599%2590%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B"},"Practice8_Section1_IllustSection_1.swift":{"syntax":"swift","content":["import IllustAPIMock","import UIKit","","struct IllustSection: Section {","    let illusts: [Illust]","    let parentWidth: CGFloat","    let heartTapped: (Illust) -> Void","","    var numberOfItems: Int {","        return illusts.count","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let spacing: CGFloat = 8","        let size: CGFloat = (parentWidth - spacing) \/ 2","","        let itemSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","        group.interItemSpacing = .fixed(spacing)","","        let section = NSCollectionLayoutSection(group: group)","        section.interGroupSpacing = spacing","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RecommendedHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"IllustCell\", for: indexPath) as? IllustCell else {","            fatalError()","        }","        cell.bind(illusts[indexPath.item], heartTapped: heartTapped)","        return cell","    }","}"],"fileName":"IllustSection.swift","identifier":"Practice8_Section1_IllustSection_1.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":40}]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--4:-------------------":{"role":"article","title":"課題4: イラストの情報を取ってきて表示しよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--4:-------------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--4:-------------------"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--1:------2----------------":{"role":"article","title":"課題1: イラストを2列で表示する仕組みを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--1:------2----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--1:------2----------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: Nukeで画像を表示する","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice4#%25E8%25A7%25A3%25E7%25AD%2594-Nuke%25E3%2581%25A7%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--5:-ViewModel-------":{"role":"article","title":"課題5: ViewModelを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--5:-ViewModel-------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--5:-viewmodel-------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice5":{"role":"project","title":"課題5: ViewModelを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"ViewModelにはUIに表示するためのプロパティを保持したり、APIを叩くなどの処理を行うためのメソッドを生やしていきます。そうすることでViewControllerはその値を見る(購読する)のと、処理を呼び出すだけの存在になり、シンプルなものになっていきます"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice5"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: セクションを管理しやすくする","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2582%25BB%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2597%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ロード中の挙動を作る","abstract":[{"type":"text","text":"通信中、何も表示されてないとユーザーはアプリが壊れているのか、ネットワークが遅いのか知ることができません。APIとの通信中はくるくるを出してあげるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice6#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E4%25B8%25AD%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--6:----(----)----------":{"role":"article","title":"課題6: 通信中(ロード中)の挙動を作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--6:----(----)----------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--6:----(----)----------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3":{"role":"project","title":"課題3: ランキングのセクションを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice3"},"Practice8_Section1_IllustViewModel_4.swift":{"syntax":"swift","content":["import Combine","import IllustAPIMock","","@MainActor","final class IllustViewModel {","    @Published var rankingIllusts: [Illust] = []","    @Published var recommendedIllusts: [Illust] = []","    @Published var offset: Int = 0","    @Published var hasNext: Bool = false","    @Published var isRequesting: Bool = false","","    private let api: IllustAPIMock","","    init(api: IllustAPIMock) {","        self.api = api","    }","","    func fetchIllusts() async {","        isRequesting = true","        do {","            rankingIllusts = try await api.getRanking()","            recommendedIllusts = try await api.getRecommended()","            offset = recommendedIllusts.count","            hasNext = !recommendedIllusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func fetchNextIllusts() async {","        guard !isRequesting else {","            return","        }","        guard hasNext else {","            return","        }","        isRequesting = true","        do {","            let illusts = try await api.getRecommended(offset: offset)","            self.recommendedIllusts += illusts","            self.offset = recommendedIllusts.count","            self.hasNext = !illusts.isEmpty","        } catch {","            print(error)","        }","        isRequesting = false","    }","","    func favorite(illust: Illust) async {","        recommendedIllusts = recommendedIllusts.map {","            if $0.id == illust.id {","                var newIllust = illust","                newIllust.isFavorited = true","                return newIllust","            }","            return $0","        }","","        do {","            _ = try await api.postIsFavorited(illustID: illust.id, isFavorited: true)","        } catch {","            \/\/ エラーが起きたら元に戻す","            recommendedIllusts = recommendedIllusts.map {","                if $0.id == illust.id {","                    var newIllust = illust","                    newIllust.isFavorited = false","                    return newIllust","                }","                return $0","            }","        }","    }","}"],"fileName":"IllustViewModel.swift","identifier":"Practice8_Section1_IllustViewModel_4.swift","type":"file","fileType":"swift","highlights":[{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71}]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--7:----------------":{"role":"article","title":"課題7: 無限スクロールを実装してみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--7:----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--7:----------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice8":{"role":"project","title":"課題8: いいねボタンを実装してみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"おすすめのイラストのCellにいいねボタンを表示してみましょう。また、いいねしたことをAPIを叩いて記録しましょう。いいねを取り消す処理は実装しなくても大丈夫です"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice8"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ランキングのセルを作る","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ViewModelを作る","abstract":[{"type":"text","text":"ViewModelにはUIに表示するためのプロパティを保持したり、APIを叩くなどの処理を行うためのメソッドを生やしていきます。そうすることでViewControllerはその値を見る(購読する)のと、処理を呼び出すだけの存在になり、シンプルなものになっていきます"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice5#%25E8%25A7%25A3%25E7%25AD%2594-ViewModel%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--3:-------------------":{"role":"article","title":"課題3: ランキングのセクションを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--3:-------------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--3:-------------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice6":{"role":"project","title":"課題6: 通信中(ロード中)の挙動を作ってみよう","estimatedTime":"20min","abstract":[{"type":"text","text":"通信中、何も表示されてないとユーザーはアプリが壊れているのか、ネットワークが遅いのか知ることができません。APIとの通信中はくるくるを出してあげるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice6"},"Practice8_IllustCell_1.png":{"alt":null,"type":"image","identifier":"Practice8_IllustCell_1.png","variants":[{"url":"\/images\/Practice8_IllustCell_1.png","traits":["1x","light"]}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice1":{"role":"project","title":"課題1: イラストを2列で表示する仕組みを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"イラストを2列で表示する仕組みを作っていきましょう。実際に画像を表示するのはこの先のSectionで扱うので、一旦2列表示の仕組みが作れればOKです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice1"}}}