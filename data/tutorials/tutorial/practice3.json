{"variants":[{"paths":["\/tutorials\/tutorial\/practice3"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキングのセクションは横スクロールできるようになっています。また、課題2でやったように何のセクションかわかるようにヘッダーも表示しましょう"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"完成イメージを示したデザインファイルは "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=7%3A27&t=LvrX1uvlmhmv5YFJ-0"},{"type":"text","text":" です"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"以下は解答になります。この教材では、まず解答を見ずにインターネット等を見て自分で書いてみることをおすすめしています。15分以上詰まったら見るという使い方をしても大丈夫です"}]}],"estimatedTimeInMinutes":60,"title":"課題3: ランキングのセクションを作ってみよう","image":"","chapter":"課題3: ランキングのセクションを作ってみよう","kind":"hero","backgroundImage":""},{"kind":"tasks","tasks":[{"anchor":"解答-ランキングのセルを作る","title":"解答: ランキングのセルを作る","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキングのセルを作ります"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"Practice3_Section1_RankingIllustCell_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキング用のCellを作っておきます。背景色は分かりやすいように緑色にします。また、デザイン上では角丸が設定されているのでこちらも設定します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"RankingIllustCell.xibを追加します。Custom ClassにRankingIllustCellを設定します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"Practice3_RankingIllustCell.png"},{"code":"Practice3_Section1_MainViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"RankingIllustCellを登録します。ヘッダーも登録しておきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"解答-セクションを管理しやすくする","title":"解答: セクションを管理しやすくする","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"複数のセクションを扱っていく際に現状のコードだと大変なのでまずは整理します"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"Practice3_Section1_MainViewController_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキングのセクションを作成する方針を確認していきます。ここはコードを書き写さなくて大丈夫です。セクションの数を2つに増やしてsectionが0であればランキング、1であればおすすめを表示するのようにすれば実現できそうな気がします"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"しかし、switch文などが増えることでレイアウトを作成するコードが長くなってしまい、見通しが悪くなってしまいます。また0番であればランキング、1番であればおすすめのような条件分岐を数カ所に書く必要があり、バグの原因になりそうです"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section1_Section_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"複数のセクションを管理しやすいようにprotocolを作成してみます。セクションの中に含まれるアイテム数、セクション内のレイアウト、Cellを作って返すメソッドを作れば、MainViewControllerで個別のセクションに関する処理を書かなくて済みそうです"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section1_IllustSection_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IllustSectionのstructを作り、Sectionを実装していきます。今までMainViewControllerにベタ書きしていたおすすめイラストのセクションをIllustSectionに移していきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section1_IllustSection_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"このファイル内ではViewControllerのviewのサイズを取ることができないため、structのイニシャライザでparentWidthを渡すようにします"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section1_MainViewController_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sectionの配列を作成し、ベタ書きしていた箇所をsectionsを見るように変えていきます。これでかなりMainViewControllerがスッキリしました"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"解答-ランキングのセクションを作成する","title":"解答: ランキングのセクションを作成する","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"整理ができたので、ランキングのセクションを作っていきます"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"Practice3_Section2_RankingIllustSection_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキング用のセクションを作成していきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section2_RankingIllustSection_2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"デザインを確認すると、各Cellのサイズは256x256になっています。GroupのLayoutSizeに "},{"type":"codeVoice","code":".absolute"},{"type":"text","text":" で値を入れていきます。"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section2_RankingIllustSection_3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキングのCellは横スクロールできるようにしたいので、sectionの "},{"type":"codeVoice","code":"orthogonalScrollingBehavior"},{"type":"text","text":" に "},{"type":"codeVoice","code":".continuous"},{"type":"text","text":" を設定します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section2_RankingIllustSection_4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"デザイン通りになるようにスペーシングを適切に設定していきます"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"Practice3_Section2_MainViewController_1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ランキングのセクションもsectionsの配列に追加します"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"課題4: イラストの情報を取ってきて表示しよう","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}]}],"identifier":{"url":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"課題3: ランキングのセクションを作ってみよう","categoryPathComponent":"TableOfContents","role":"project","category":"お絵かきSNSを作ってみよう"},"hierarchy":{"modules":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--1:------2----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--2:-----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--3:-------------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--4:-------------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B"},{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--5:-ViewModel-------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--6:----(----)----------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--7:----------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B"}]}]},{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--8:---------------","projects":[{"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8","sections":[{"kind":"task","reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B"}]}]}],"reference":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","paths":[["doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/$volume","doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--3:-------------------"]]},"references":{"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice7":{"role":"project","title":"課題7: 無限スクロールを実装してみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"おすすめのイラストは、スクロールで下まで読み込んだら次のイラストを表示するようにしたいです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice7"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ランキングのセクションを作成する","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25BB%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice1":{"role":"project","title":"課題1: イラストを2列で表示する仕組みを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"イラストを2列で表示する仕組みを作っていきましょう。実際に画像を表示するのはこの先のSectionで扱うので、一旦2列表示の仕組みが作れればOKです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice1"},"Practice3_Section2_RankingIllustSection_3.swift":{"syntax":"swift","content":["import UIKit","","struct RankingIllustSection: Section {","    var numberOfItems: Int {","        return 4","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let size: CGFloat = 256","        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","","        let section = NSCollectionLayoutSection(group: group)","        section.orthogonalScrollingBehavior = .continuous","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RankingHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"RankingIllustCell\", for: indexPath) as? RankingIllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"RankingIllustSection.swift","identifier":"Practice3_Section2_RankingIllustSection_3.swift","type":"file","fileType":"swift","highlights":[{"line":17}]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--8:---------------":{"role":"article","title":"課題8: いいねボタンを実装してみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--8:---------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--8:---------------"},"Practice3_RankingIllustCell.png":{"alt":null,"type":"image","identifier":"Practice3_RankingIllustCell.png","variants":[{"url":"\/images\/Practice3_RankingIllustCell.png","traits":["1x","light"]}]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--5:-ViewModel-------":{"role":"article","title":"課題5: ViewModelを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--5:-ViewModel-------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--5:-viewmodel-------"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--7:----------------":{"role":"article","title":"課題7: 無限スクロールを実装してみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--7:----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--7:----------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: いいねボタンを実装する","abstract":[{"type":"text","text":"おすすめのイラストのCellにいいねボタンを表示してみましょう。また、いいねしたことをAPIを叩いて記録しましょう。いいねを取り消す処理は実装しなくても大丈夫です"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8#%E8%A7%A3%E7%AD%94-%E3%81%84%E3%81%84%E3%81%AD%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice8#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AD%25E3%2583%259C%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B"},"Practice3_Section1_IllustSection_1.swift":{"syntax":"swift","content":["import UIKit","","struct IllustSection: Section {","    var numberOfItems: Int {","        return 8","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let spacing: CGFloat = 8","        let size: CGFloat = (self.view.bounds.width - spacing) \/ 2","","        let itemSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","        group.interItemSpacing = .fixed(spacing)","","        let section = NSCollectionLayoutSection(group: group)","        section.interGroupSpacing = spacing","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RecommendedHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"IllustCell\", for: indexPath) as? IllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"IllustSection.swift","identifier":"Practice3_Section1_IllustSection_1.swift","type":"file","fileType":"swift","highlights":[]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B":{"role":"pseudoSymbol","title":"解答: イラストの情報を取ってくる","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice4#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258B"},"Practice3_Section2_RankingIllustSection_2.swift":{"syntax":"swift","content":["import UIKit","","struct RankingIllustSection: Section {","    var numberOfItems: Int {","        return 4","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let size: CGFloat = 256","        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","","        let section = NSCollectionLayoutSection(group: group)","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RankingHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"RankingIllustCell\", for: indexPath) as? RankingIllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"RankingIllustSection.swift","identifier":"Practice3_Section2_RankingIllustSection_2.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":13}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice5":{"role":"project","title":"課題5: ViewModelを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"ViewModelにはUIに表示するためのプロパティを保持したり、APIを叩くなどの処理を行うためのメソッドを生やしていきます。そうすることでViewControllerはその値を見る(購読する)のと、処理を呼び出すだけの存在になり、シンプルなものになっていきます"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice5"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents":{"role":"overview","title":"はじめに","abstract":[{"type":"text","text":"お絵かきSNSの開発を通して、実例に近いiOSアプリ開発を学んでいきましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents","kind":"overview","type":"topic","url":"\/tutorials\/tableofcontents"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--6:----(----)----------":{"role":"article","title":"課題6: 通信中(ロード中)の挙動を作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--6:----(----)----------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--6:----(----)----------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice2":{"role":"project","title":"課題2: おすすめのヘッダーを作ってみよう","estimatedTime":"40min","abstract":[{"type":"text","text":"2列表示のセクションの上にヘッダーを作って、何のコンテンツの領域かわかるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice2"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4":{"role":"project","title":"課題4: イラストの情報を取ってきて表示しよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice4"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--4:-------------------":{"role":"article","title":"課題4: イラストの情報を取ってきて表示しよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--4:-------------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--4:-------------------"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--1:------2----------------":{"role":"article","title":"課題1: イラストを2列で表示する仕組みを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--1:------2----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--1:------2----------------"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: 無限スクロールを実装する","abstract":[{"type":"text","text":"おすすめのイラストは、スクロールで下まで読み込んだら次のイラストを表示するようにしたいです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice7#%E8%A7%A3%E7%AD%94-%E7%84%A1%E9%99%90%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice7#%25E8%25A7%25A3%25E7%25AD%2594-%25E7%2584%25A1%25E9%2599%2590%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: 2列表示の仕組みを作る","abstract":[{"type":"text","text":"イラストを2列で表示する仕組みを作っていきましょう。実際に画像を表示するのはこの先のSectionで扱うので、一旦2列表示の仕組みが作れればOKです"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice1#%E8%A7%A3%E7%AD%94-2%E5%88%97%E8%A1%A8%E7%A4%BA%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice1#%25E8%25A7%25A3%25E7%25AD%2594-2%25E5%2588%2597%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--2:-----------------":{"role":"article","title":"課題2: おすすめのヘッダーを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--2:-----------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--2:-----------------"},"Practice3_Section1_MainViewController_2.swift":{"syntax":"swift","content":["import UIKit","","class MainViewController: UIViewController {","    @IBOutlet private weak var collectionView: UICollectionView! {","        didSet {","            collectionView.dataSource = self","            registerCells()","        }","    }","","    override func viewDidLoad() {","        super.viewDidLoad()","","        collectionView.collectionViewLayout = {","            let layout = UICollectionViewCompositionalLayout { (sectionIndex, environment) -> NSCollectionLayoutSection? in","                switch sectionIndex {","                case 0: \/\/ ランキング","                    let item = ...","                    let group = ...","                    let section = ...","                    return section","                case 1: \/\/ おすすめ","                    let item = ...","                    let group = ...","                    let section = ...","                    return section","                }","            }","            return layout","        }()","    }","}","","extension MainViewController {","    private func registerCells() {","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RecommendedHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RankingHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"IllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"IllustCell\")","        collectionView.register(UINib(nibName: \"RankingIllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"RankingIllustCell\")","    }","}","","extension MainViewController: UICollectionViewDataSource {","    func numberOfSections(in collectionView: UICollectionView) -> Int {","        return 2","    }","","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return 8","    }","","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        switch indexPath.section {","        case 0:","            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"RankingIllustCell\", for: indexPath) as? RankingIllustCell else {","                fatalError()","            }","            return cell","        case 1:","            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"IllustCell\", for: indexPath) as? IllustCell else {","                fatalError()","            }","            return cell","        }","    }","","    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {","        guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"HeaderCell\", for: indexPath) as? HeaderCell else {","            fatalError()","        }","        switch kind {","        case \"RecommendedHeader\":","            header.bind(\"Recommended\")","            return header","        case \"RankingHeader\":","            header.bind(\"Ranking\")","            return header","        default:","            fatalError()","         }","    }","}"],"fileName":"MainViewController.swift","identifier":"Practice3_Section1_MainViewController_2.swift","type":"file","fileType":"swift","highlights":[]},"doc://net.pixiv.training.Tutorial/tutorials/TableOfContents/--3:-------------------":{"role":"article","title":"課題3: ランキングのセクションを作ってみよう","abstract":[],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/TableOfContents\/--3:-------------------","kind":"article","type":"topic","url":"\/tutorials\/tableofcontents\/--3:-------------------"},"Practice3_Section2_MainViewController_1.swift":{"syntax":"swift","content":["import UIKit","","class MainViewController: UIViewController {","    @IBOutlet private weak var collectionView: UICollectionView! {","        didSet {","            collectionView.dataSource = self","            registerCells()","        }","    }","","    private var sections: [Section] = []","","    override func viewDidLoad() {","        super.viewDidLoad()","","        sections = [","            RankingIllustSection(),","            IllustSection(parentWidth: self.view.bounds.width)","        ]","        collectionView.collectionViewLayout = {","            let layout = UICollectionViewCompositionalLayout { (sectionIndex, environment) -> NSCollectionLayoutSection? in","                return self.sections[sectionIndex].layoutSection()","            }","            return layout","        }()","    }","}","","extension MainViewController {","    private func registerCells() {","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RecommendedHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RankingHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"IllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"IllustCell\")","        collectionView.register(UINib(nibName: \"RankingIllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"RankingIllustCell\")","    }","}","","extension MainViewController: UICollectionViewDataSource {","    func numberOfSections(in collectionView: UICollectionView) -> Int {","        return sections.count","    }","","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return sections[section].numberOfItems","    }","","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        return sections[indexPath.section].configureCell(collectionView: collectionView, indexPath: indexPath)","    }","","    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {","        guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"HeaderCell\", for: indexPath) as? HeaderCell else {","            fatalError()","        }","        switch kind {","        case \"RecommendedHeader\":","            header.bind(\"Recommended\")","            return header","        case \"RankingHeader\":","            header.bind(\"Ranking\")","            return header","        default:","            fatalError()","         }","    }","}"],"fileName":"MainViewController.swift","identifier":"Practice3_Section2_MainViewController_1.swift","type":"file","fileType":"swift","highlights":[{"line":17}]},"Practice3_Section1_MainViewController_1.swift":{"syntax":"swift","content":["import UIKit","","class MainViewController: UIViewController {","    @IBOutlet private weak var collectionView: UICollectionView! {","        didSet {","            collectionView.dataSource = self","            registerCells()","        }","    }","","    override func viewDidLoad() {","        super.viewDidLoad()","","        collectionView.collectionViewLayout = {","            let layout = UICollectionViewCompositionalLayout { (sectionIndex, environment) -> NSCollectionLayoutSection? in","                let spacing: CGFloat = 8","                let size: CGFloat = (self.view.bounds.width - spacing) \/ 2","","                let itemSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .fractionalHeight(1))","                let item = NSCollectionLayoutItem(layoutSize: itemSize)","","                let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(size))","                let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","                group.interItemSpacing = .fixed(spacing)","","                let section = NSCollectionLayoutSection(group: group)","                section.interGroupSpacing = spacing","","                let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","                    layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","                    elementKind: \"RecommendedHeader\",","                    alignment: .top","                )","                section.boundarySupplementaryItems = [sectionHeader]","","                return section","            }","            return layout","        }()","    }","}","","extension MainViewController {","    private func registerCells() {","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RecommendedHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RankingHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"IllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"IllustCell\")","        collectionView.register(UINib(nibName: \"RankingIllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"RankingIllustCell\")","    }","}","","extension MainViewController: UICollectionViewDataSource {","    func numberOfSections(in collectionView: UICollectionView) -> Int {","        return 1","    }","","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return 8","    }","","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"IllustCell\", for: indexPath) as? IllustCell else {","            fatalError()","        }","        return cell","    }","","    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {","        guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"HeaderCell\", for: indexPath) as? HeaderCell else {","            fatalError()","        }","        switch kind {","        case \"RecommendedHeader\":","            header.bind(\"Recommended\")","            return header","        case \"RankingHeader\":","            header.bind(\"Ranking\")","            return header","        default:","            fatalError()","         }","    }","}"],"fileName":"MainViewController.swift","identifier":"Practice3_Section1_MainViewController_1.swift","type":"file","fileType":"swift","highlights":[{"line":46},{"line":48},{"line":76},{"line":77},{"line":78}]},"Practice3_Section1_RankingIllustCell_1.swift":{"syntax":"swift","content":["import UIKit","","class RankingIllustCell: UICollectionViewCell {","    override func awakeFromNib() {","        super.awakeFromNib()","        backgroundColor = .green","        layer.cornerRadius = 8","        layer.masksToBounds = true","    }","}"],"fileName":"RankingIllustCell.swift","identifier":"Practice3_Section1_RankingIllustCell_1.swift","type":"file","fileType":"swift","highlights":[]},"Practice3_Section2_RankingIllustSection_1.swift":{"syntax":"swift","content":["import UIKit","","struct RankingIllustSection: Section {","    var numberOfItems: Int {","        return 4","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let itemSize = NSCollectionLayoutSize(widthDimension: ..., heightDimension: ...)","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: ..., heightDimension: ...)","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","","        let section = NSCollectionLayoutSection(group: group)","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RankingHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"RankingIllustCell\", for: indexPath) as? RankingIllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"RankingIllustSection.swift","identifier":"Practice3_Section2_RankingIllustSection_1.swift","type":"file","fileType":"swift","highlights":[]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ロード中の挙動を作る","abstract":[{"type":"text","text":"通信中、何も表示されてないとユーザーはアプリが壊れているのか、ネットワークが遅いのか知ることができません。APIとの通信中はくるくるを出してあげるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6#%E8%A7%A3%E7%AD%94-%E3%83%AD%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AE%E6%8C%99%E5%8B%95%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice6#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E4%25B8%25AD%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ヘッダーを作る","abstract":[{"type":"text","text":"2列表示のセクションの上にヘッダーを作って、何のコンテンツの領域かわかるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice2#%E8%A7%A3%E7%AD%94-%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice2#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%2598%25E3%2583%2583%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"Practice3_Section1_IllustSection_2.swift":{"syntax":"swift","content":["import UIKit","","struct IllustSection: Section {","    let parentWidth: CGFloat","","    var numberOfItems: Int {","        return 8","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let spacing: CGFloat = 8","        let size: CGFloat = (parentWidth - spacing) \/ 2","","        let itemSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","        group.interItemSpacing = .fixed(spacing)","","        let section = NSCollectionLayoutSection(group: group)","        section.interGroupSpacing = spacing","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RecommendedHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"IllustCell\", for: indexPath) as? IllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"IllustSection.swift","identifier":"Practice3_Section1_IllustSection_2.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":12}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ランキングのセルを作る","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%BB%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"https://www.figma.com/file/EkZe8zNKd8uTr1vehAzC74/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=7%3A27&t=LvrX1uvlmhmv5YFJ-0":{"title":"こちら","titleInlineContent":[{"type":"text","text":"こちら"}],"type":"link","identifier":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=7%3A27&t=LvrX1uvlmhmv5YFJ-0","url":"https:\/\/www.figma.com\/file\/EkZe8zNKd8uTr1vehAzC74\/pixiv%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86?node-id=7%3A27&t=LvrX1uvlmhmv5YFJ-0"},"Practice3_Section2_RankingIllustSection_4.swift":{"syntax":"swift","content":["import UIKit","","struct RankingIllustSection: Section {","    var numberOfItems: Int {","        return 4","    }","","    func layoutSection() -> NSCollectionLayoutSection {","        let spacing: CGFloat = 8","        let size: CGFloat = 256","        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))","        let item = NSCollectionLayoutItem(layoutSize: itemSize)","","        let groupSize = NSCollectionLayoutSize(widthDimension: .absolute(size), heightDimension: .absolute(size))","        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])","","        let section = NSCollectionLayoutSection(group: group)","        section.orthogonalScrollingBehavior = .continuous","        section.contentInsets = .init(top: 0, leading: spacing, bottom: spacing, trailing: 0)","        section.interGroupSpacing = spacing","","        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(","            layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(32)),","            elementKind: \"RankingHeader\",","            alignment: .top","        )","        section.boundarySupplementaryItems = [sectionHeader]","        return section","    }","","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {","        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"RankingIllustCell\", for: indexPath) as? RankingIllustCell else {","            fatalError()","        }","        return cell","    }","}"],"fileName":"RankingIllustSection.swift","identifier":"Practice3_Section2_RankingIllustSection_4.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":19},{"line":20}]},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice6":{"role":"project","title":"課題6: 通信中(ロード中)の挙動を作ってみよう","estimatedTime":"20min","abstract":[{"type":"text","text":"通信中、何も表示されてないとユーザーはアプリが壊れているのか、ネットワークが遅いのか知ることができません。APIとの通信中はくるくるを出してあげるようにしてみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice6","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice6"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: セクションを管理しやすくする","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3#%E8%A7%A3%E7%AD%94-%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%AE%A1%E7%90%86%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice3#%25E8%25A7%25A3%25E7%25AD%2594-%25E3%2582%25BB%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2597%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B":{"role":"pseudoSymbol","title":"解答: Nukeで画像を表示する","abstract":[{"type":"text","text":"今まで作った仮のUIに実際にイラストの情報を取ってきて表示してみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice4#%E8%A7%A3%E7%AD%94-Nuke%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice4#%25E8%25A7%25A3%25E7%25AD%2594-Nuke%25E3%2581%25A7%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice8":{"role":"project","title":"課題8: いいねボタンを実装してみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"おすすめのイラストのCellにいいねボタンを表示してみましょう。また、いいねしたことをAPIを叩いて記録しましょう。いいねを取り消す処理は実装しなくても大丈夫です"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice8","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice8"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B":{"role":"pseudoSymbol","title":"解答: ViewModelを作る","abstract":[{"type":"text","text":"ViewModelにはUIに表示するためのプロパティを保持したり、APIを叩くなどの処理を行うためのメソッドを生やしていきます。そうすることでViewControllerはその値を見る(購読する)のと、処理を呼び出すだけの存在になり、シンプルなものになっていきます"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice5#%E8%A7%A3%E7%AD%94-ViewModel%E3%82%92%E4%BD%9C%E3%82%8B","kind":"section","type":"section","url":"\/tutorials\/tutorial\/practice5#%25E8%25A7%25A3%25E7%25AD%2594-ViewModel%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B"},"doc://net.pixiv.training.Tutorial/tutorials/Tutorial/Practice3":{"role":"project","title":"課題3: ランキングのセクションを作ってみよう","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"課題1・2で作ったセクションの上に、ランキングを配置するセクションを作ってみましょう"}],"identifier":"doc:\/\/net.pixiv.training.Tutorial\/tutorials\/Tutorial\/Practice3","kind":"project","type":"topic","url":"\/tutorials\/tutorial\/practice3"},"Practice3_Section1_Section_1.swift":{"syntax":"swift","content":["import UIKit","","protocol Section {","    var numberOfItems: Int { get }","    func layoutSection() -> NSCollectionLayoutSection","    func configureCell(collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell","}"],"fileName":"Section.swift","identifier":"Practice3_Section1_Section_1.swift","type":"file","fileType":"swift","highlights":[]},"Practice3_Section1_MainViewController_3.swift":{"syntax":"swift","content":["import UIKit","","class MainViewController: UIViewController {","    @IBOutlet private weak var collectionView: UICollectionView! {","        didSet {","            collectionView.dataSource = self","            registerCells()","        }","    }","","    private var sections: [Section] = []","","    override func viewDidLoad() {","        super.viewDidLoad()","","        sections = [","            IllustSection(parentWidth: self.view.bounds.width)","        ]","        collectionView.collectionViewLayout = {","            let layout = UICollectionViewCompositionalLayout { (sectionIndex, environment) -> NSCollectionLayoutSection? in","                return self.sections[sectionIndex].layoutSection()","            }","            return layout","        }()","    }","}","","extension MainViewController {","    private func registerCells() {","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RecommendedHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"HeaderCell\", bundle: nil), forSupplementaryViewOfKind: \"RankingHeader\", withReuseIdentifier: \"HeaderCell\")","        collectionView.register(UINib(nibName: \"IllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"IllustCell\")","        collectionView.register(UINib(nibName: \"RankingIllustCell\", bundle: nil),  forCellWithReuseIdentifier: \"RankingIllustCell\")","    }","}","","extension MainViewController: UICollectionViewDataSource {","    func numberOfSections(in collectionView: UICollectionView) -> Int {","        return sections.count","    }","","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return sections[section].numberOfItems","    }","","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        return sections[indexPath.section].configureCell(collectionView: collectionView, indexPath: indexPath)","    }","","    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {","        guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"HeaderCell\", for: indexPath) as? HeaderCell else {","            fatalError()","        }","        switch kind {","        case \"RecommendedHeader\":","            header.bind(\"Recommended\")","            return header","        case \"RankingHeader\":","            header.bind(\"Ranking\")","            return header","        default:","            fatalError()","         }","    }","}"],"fileName":"MainViewController.swift","identifier":"Practice3_Section1_MainViewController_3.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":16},{"line":17},{"line":18},{"line":21},{"line":39},{"line":43},{"line":47}]}}}